@設定1
--dialog:眉,Eyebrow="";目,Eye="";口,Mouth="";髪,Hair="";顔色,Complexion="";体,Body="";

@設定2
--dialog:後1,Back1="";後2,Back2="";後3,Back3="";他1,Etc1="";他2,Etc2="";他3,Etc3="";目数,EyeNum=0;口数,MouthNum=0;まばたき,EyeAnimation="Default";口パク,MouthAnimation="Default";

function IsNilOrEmpty(text)
	return text == nil or text == "" or text == ''
end
function GetFileNameWithoutExtension(file)
	local index = string.find(file,"%.%w+$",1,false)
	if (index == nil) then
		return file
	end
	return string.sub(file,1,index-1)
end
function GetExtension(file)
	local index = string.find(file,"%.%w+$",1,false)
	return string.sub(file,index)
end
function GetIniFile(file)
	return GetFileNameWithoutExtension(GetFileNameWithoutExtension(file)) .. ".ini"
end
function ParseIniFile(file)
	local result = {}
	
	local fp = io.open(file,"r")
	if fp ~= nil then
		local line = ""
		for line in fp:lines() do
			local index = string.find(line,";")
			if index ~= nil then
				line = string.sub(line,1,index-1)
			end
			
			index = string.find(line,"=")
			if index ~= nil then
				local key = string.sub(line,1,index-1)
				local value = string.sub(line,index+1)
				result[key] = value
			end
		end
		io.close(fp)
	end
	return result
end
function GetNumberOrDefault(text,defValue)
	local result = tonumber(text)
	if result == nil then
		result = defValue
	end
	return result
end

function GetSeed(dir)
	local c = string.sub(dir,#dir,#dir)
	local seed = string.byte(c)
	
	return seed * seed
end

function GetEyeBlink(tachieTime, seed, blinkStart, blinkInterval)
	math.randomseed(seed)

	if blinkStart == 0 then
		blinkStart = 5.0 + 5.0 + 5 * math.random(100)/100.0
	end
	if blinkInterval == 0 then
		blinkInterval = 5.0 + 5 * math.random(100)/100.0
	end

	if tachieTime - blinkStart < 0 then
		return 1
	end
	local blinkLength = 0.3
	local blinkTime = (tachieTime - blinkStart) % (blinkLength + blinkInterval)
	local blinkRate = blinkTime / blinkLength
	if 0 <= blinkRate and blinkRate <= 0.5 then
		return 1 - blinkRate * 2
	elseif 0.5 <= blinkRate and blinkRate <= 1 then
		return (blinkRate - 0.5) * 2
	else
		return 1
	end
end
function GetParts(dir,file)
	if IsNilOrEmpty(file) then
		return ""
	end

	--拡張子を小文字に統一する（大文字だと読み込めない）
	local path = dir..GetFileNameWithoutExtension(file)..string.lower(GetExtension(file))
	return path
end
function GetAnimatedParts(dir,file,rate,num)
	if IsNilOrEmpty(file) then
		return ""
	end
	
	local index = math.floor(num * rate)
	index = index < 0 and 0 or index
	
	local path = ""
	if num - 1 <= index then
		path = GetParts(dir,file)
	else
		path = GetParts(dir,GetFileNameWithoutExtension(file).."."..index..GetExtension(file))
	end
	return path
end

@口パク
--file:
function GetLipSync(file)
	if IsNilOrEmpty(file) then return 0 end
	local buf={}
	local n = obj.getaudio(buf, file,"spectrum",32)
	
	local sum = 0
	local i = 0
	for i=0, n-1 do
		sum = sum + buf[i+1]
	end
	local avg = sum / n
	
	return avg/300.0
end
HasVoice = true
if IsNilOrEmpty(file) then 
	HasVoice = false
end
LipSync = GetLipSync(file)

@描画
--dialog:素材フォルダ,Dir="";まばたき開始,blinkStart=0;まばたき間隔,blinkInterval=0;喋る時のみ表示/chk,isHiddenWhenNoSpeech=0;口パク感度,mouthSensitivity=100;
function DrawFile(canvas, cw, ch,file, tachieTime, isOpacitySupported)
	if IsNilOrEmpty(file) then return end
	
	local iniFile = GetIniFile(file)
	local properties = ParseIniFile(iniFile)
	local blend = GetNumberOrDefault(properties["blend"], 0)
	local opacity = GetNumberOrDefault(properties["opacity"], 100)

	if isOpacitySupported == 0 then
		opacity = 100
	end

	local isVideo = string.find(file,".mp4",1,true) == #file - 3  or string.find(file,".avi",1,true) == #file - 3 or string.find(file,".gif",1,true) == #file - 3 or string.find(file,".webp",1,true) == #file - 3
	if isVideo then
		local totalTime = obj.load("movie",file)
		obj.load("movie", file, tachieTime % totalTime,1)
	else
		obj.load(file)
	end

	local data, w, h = obj.getpixeldata()
	require("ymm4native")
	if opacity ~= 100 then
		ymm4native.set_alpha(data, w, h, opacity/100);
	end
	ymm4native.blend(canvas, cw, ch, data, w, h, blend);
end
function GetLayerSize(files)
	local w = 0
	local h = 0
	local tmpw = 0
	local tmph = 0
	for num, file in ipairs(files) do
		if IsNilOrEmpty(file) == false then
			obj.load(file)
			tmpw,tmph = obj.getpixel()
			if w < tmpw then w = tmpw end
			if h < tmph then h = tmph end
		end
	end
	return w, h
end
function HasFaceItem()
	return obj.layer == 1 or obj.getvalue("layer"..(obj.layer-1)..".x") == nil
end
function CreateCanvs(width ,height)
	obj.setoption("drawtarget","tempbuffer",width,height)
	obj.load("tempbuffer")
	data = obj.getpixeldata("work")
	
	require("ymm4native")
	ymm4native.clear(data, width, height)

	return data
end
function LoadCanvas(canvas,width,height)
	obj.setoption("drawtarget","tempbuffer",width,height)
	obj.load("tempbuffer")
	obj.putpixeldata(canvas)
end

if HasFaceItem() or IsNilOrEmpty(Dir) or (isHiddenWhenNoSpeech == 1 and HasVoice == false) then
	obj.setoption("drawtarget","tempbuffer",1,1)
	obj.load("tempbuffer")
	return
end

local tachieTime = obj.time
local EyeBlink = GetEyeBlink(tachieTime, GetSeed(Dir), blinkStart, blinkInterval)
if EyeAnimation == "AlwaysOpen" then
	EyeBlink = 1
elseif EyeAnimation == "AlwaysClose" then
	EyeBlink = 0
end

LipSync = LipSync * mouthSensitivity / 100;
if MouthAnimation == "AlwaysOpen" then
	LipSync = 1
elseif MouthAnimation == "AlwaysClose" then
	LipSync = 0
end


Eyebrow    = GetParts(Dir.."\\眉\\", Eyebrow)
Eye        = GetAnimatedParts(Dir.."\\目\\", Eye,   EyeBlink, EyeNum)
Mouth      = GetAnimatedParts(Dir.."\\口\\", Mouth, LipSync,  MouthNum)

Hair       = GetParts(Dir.."\\髪\\", Hair)
Complexion = GetParts(Dir.."\\顔色\\", Complexion)
Body       = GetParts(Dir.."\\体\\", Body)

Back1      = GetParts(Dir.."\\後\\", Back1)
Back2      = GetParts(Dir.."\\後\\", Back2)
Back3      = GetParts(Dir.."\\後\\", Back3)

Etc1       = GetParts(Dir.."\\他\\", Etc1)
Etc2       = GetParts(Dir.."\\他\\", Etc2)
Etc3       = GetParts(Dir.."\\他\\", Etc3)

Layers     = { Back3, Back2, Back1, Body, Complexion, Hair, Mouth, Eye, Eyebrow, Etc3, Etc2, Etc1}

local ComplexionIni = GetIniFile(Complexion)
local ComplexionProps = ParseIniFile(ComplexionIni)
local ComplexionPlaceOn = ComplexionProps["placeon"]

--描画
local w,h = GetLayerSize(Layers)
if w == 0 or h == 0 then
	w = 1
	h = 1
end
local canvas = CreateCanvs(w,h)

DrawFile(canvas, w, h,Back3, tachieTime, 0)
DrawFile(canvas, w, h,Back2, tachieTime, 0)
DrawFile(canvas, w, h,Back1, tachieTime, 0)

DrawFile(canvas, w, h,Body , tachieTime, 0)
if ComplexionPlaceOn == nil or ComplexionPlaceOn == "body" then
	DrawFile(canvas, w, h,Complexion, tachieTime, 0)
end
DrawFile(canvas, w, h,Hair, tachieTime, 0)

DrawFile(canvas, w, h,Mouth, tachieTime, 0)
DrawFile(canvas, w, h,Eye, tachieTime, 0)
DrawFile(canvas, w, h,Eyebrow, tachieTime, 0)

if ComplexionPlaceOn == "face" then
	DrawFile(canvas, w, h,Complexion, tachieTime, 0)
end

DrawFile(canvas, w, h,Hair, tachieTime, 1)

if ComplexionPlaceOn == "hair" then
	DrawFile(canvas, w, h,Complexion, tachieTime, 0)
end

DrawFile(canvas, w, h,Etc3, tachieTime, 0)
DrawFile(canvas, w, h,Etc2, tachieTime, 0)
DrawFile(canvas, w, h,Etc1, tachieTime, 0)

LoadCanvas(canvas, w, h);